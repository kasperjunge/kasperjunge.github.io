.. post:: Feb 21, 2025
   :tags: 
   :author: Kasper Junge

**Things I've learned after 2 years of using LLMs for coding**
==========================================================

Since the release of ChatGPT, I've been using AI chatbots a lot for coding.

I've been experiencing that adictive adreneline kick of suddenly being able crank code out at a much faster pace that I could ever imagine.

However the exact same feeling have also seduced med into writing a ton of code that I had no idea how worked and I had to watch it burn in flames when the whole thing collapsed and I had no idea how to fix it, because I had been coding beyond my ability.

In the past two years I've been generating a ton output from AI chatbots, good and bad, and I've spent a lot of time trying to understand and trace back what causes a good and a bad output.

Many are of the opinion that the idea that programmers can be more productive wiht AI chatbots is an illusion.
With the journey I've been on, I can say that it is not an illusion, but I understand where they are coming from.

Because it can be very tempting for people to write a lot of super poor code that either yourself of others have to clean up afterwards.

First of all I think that AI as a tool for coding is an unavoidable part of the future, so wether you like it or not, you will have to get used to it. 
Because if you're not becoming used to it, you will at least have to deal with people around you that are using it.

What I think is needed is cultivation of a culture where people are using AI in a responsible and sustainable way and in this blog post I will honestly share some of the things i've learned in the 2 years i've been using ai for coding.

**Productivity-mode vs. Learning-mode**
---------------------------------------

When you know what you're doing, use AI to crank code out as fast as you possibly can.
When you have no idea what you're doing, slow down and use the AI as a super efficient learning tool ot properly understand what the thing you are trying to do.

The way I learned this was from really pushing the limits of what I could build with AI in programming languages, technologies and libraries I didn't fully understand.

It is easy to get carried away by the adrenaline kick of producing A LOT of code fast, but it is unsustainable as you will hit a point where you are drowning in code you don't understand and don't know how to fix when it breaks.
That feeling can easily overshadow the fact that AI chatbots are an amazing learning tool, that will 10x, if not 100x, your learning.

Slowing down to really understand something has always been a great investment and still is. 

So the control flow of you AI chatbot usage for code should be:

   if you know what you're doing:
      use AI to crank out code as fast as you can
   else:
      slow down and use AI as a super efficient learning tool

**The three components of getting good results from AI chatbots**
-----------------------------------------------------------------

Everytime I get unsatisfactory results from an AI chatbot, it can always be traced back to one of these three components:

1. Instruction
2. Context
3. Model capability

**Instruction**
One of the main reasnons I get a bad output from an AI chatbot is related to the instruction I gave it.



