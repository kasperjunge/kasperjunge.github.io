
.. post:: Mar 23, 2025
   :tags: 
   :author: Kasper Junge

100 Best Tips, Tricks, Hacks, and Methods Users of Cursor Have for Coding with AI in Cursor
===========================================================================================

1. Keep your code files as small as possible. Users report that splitting large files into smaller ones makes Cursor’s AI responses faster and more accurate (and less likely to behave oddly) ([Cursor make ai waken up - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/cursor-make-ai-waken-up/64966#:~:text=cocode%20%20March%2016%2C%202025%2C,11%3A53am%20%202)). Huge files (approaching 800+ lines) tend to slow the AI and even confuse it.

2. Be mindful of Cursor’s ~800 line limit per file. The AI often can’t handle reading or modifying more than about 750–800 lines at once ([Cursor make ai waken up - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/cursor-make-ai-waken-up/64966#:~:text=,1)). If you have a giant file, break the task into smaller chunks or refactor the code into multiple files so the AI can work effectively within its context window.

3. If Cursor’s performance degrades over time, try **resetting the context** by copying your project to a new folder. One user found that after heavy usage, cloning the code into a fresh directory and opening it in Cursor (thus starting a new session) made everything smooth again ([Cursor ai is too slow - Bug Reports - Cursor - Community Forum](https://forum.cursor.com/t/cursor-ai-is-too-slow/64691#:~:text=Same%20issue,frustrating%20especially%20for%20large%20codebases)).

4. Similarly, if Agent mode runs sluggishly or the IDE starts hanging, consider restarting Cursor or opening a new chat. Long-running sessions accumulate a lot of context. Periodically resetting (or even just closing and re-opening Cursor) clears that build-up and can restore snappiness ([Cursor ai is too slow - Bug Reports - Cursor - Community Forum](https://forum.cursor.com/t/cursor-ai-is-too-slow/64691#:~:text=Same%20issue,frustrating%20especially%20for%20large%20codebases)).

5. Avoid editing extremely large files in one go. Cursor’s AI **really** struggles with files over ~500 lines ([Performance Degradation and AI Editing Issues in Cursor IDE - Bug Reports - Cursor - Community Forum](https://forum.cursor.com/t/performance-degradation-and-ai-editing-issues-in-cursor-ide/61928#:~:text=2,Large%20Code%20Files)). If you need to modify a big file, try to split the changes or guide the AI to focus on one section at a time. Smaller scopes mean faster responses and fewer failures.

6. Don’t let a single chat session run forever. Users have noticed that after many rounds of conversation, Cursor can become sluggish or even crash ([Performance Degradation and AI Editing Issues in Cursor IDE - Bug Reports - Cursor - Community Forum](https://forum.cursor.com/t/performance-degradation-and-ai-editing-issues-in-cursor-ide/61928#:~:text=When%20interacting%20with%20the%20AI,the%20conversation%20data%20management%20mechanism)). It’s often better to start a fresh chat (or “reset” the conversation) once you’ve done a lot of Q&A, so the AI isn’t overloaded with long chat history.

7. **Double-check dates** that the AI inserts. Cursor’s models do not know the current date and often guess (sometimes giving 2021 or 2023) ([AI keeps using wrong date - How To - Cursor - Community Forum](https://forum.cursor.com/t/ai-keeps-using-wrong-date/64992#:~:text=If%20the%20AI%20needs%20to,but%20never%20my%20actual%20date%E2%80%A6)). If you ask it to add timestamps, version numbers, or dates in code comments, be aware you’ll likely need to correct those manually.

8. Take advantage of the **Cursor Directory** (a community-driven site) to enhance your AI experience ([Show HN: Cursor Directory – From a 3-hour build to a 250k users/mo community | Hacker News](https://news.ycombinator.com/item?id=43412295#:~:text=Viktor%20and%20I%20built%20the,to%20enhance%20the%20Cursor%20experience)). It provides a curated collection of Cursor rules and configurations shared by other users. You can find rules for various frameworks or tasks there – essentially community “hacks” to make Cursor behave in specific ways.

9. When you find a useful rule (prompt guideline) from the community or create your own, save it as a file in the `.cursor/rules` directory of your project ([Show HN: Cursor Directory – From a 3-hour build to a 250k users/mo community | Hacker News](https://news.ycombinator.com/item?id=43412295#:~:text=pontusabb%20%20%2038%20,36%20%5B%E2%80%93)). Cursor will automatically load these `.mdc` rule files. For example, you might have a `logging.mdc` rule file that tells the AI to always include proper logging in its outputs.

10. **Don’t put everything in one rule file.** Keep your Cursor rules simple and focused, rather than one giant monolithic set of instructions ([You’re using Cursor rules the wrong way - How To - Cursor - Community Forum](https://forum.cursor.com/t/you-re-using-cursor-rules-the-wrong-way/62530#:~:text=1,applied%20in%20every%20AI%20action)). Users discovered that splitting rules by concern (e.g. one file for styling conventions, another for security guidelines) yields better results. The AI can then pick the relevant rule file for the situation.

11. Each time the AI makes a new kind of mistake, consider writing a new rule to address it. One power-user noted that whenever the AI repeated an error, they’d add a rule to prevent that pattern ([You’re using Cursor rules the wrong way - How To - Cursor - Community Forum](https://forum.cursor.com/t/you-re-using-cursor-rules-the-wrong-way/62530#:~:text=1,applied%20in%20every%20AI%20action)). Over time, this created a custom ruleset that *significantly* improved Cursor’s reliability for their project.

12. Let the AI help **write its own rules**. You can use a “meta” approach: if Cursor keeps doing something wrong, ask Cursor itself, “Can you draft a rule that would help avoid X mistake?” Users have found that having the AI propose a rule (which you then tweak) can be an effective way to build a robust ruleset ([You’re using Cursor rules the wrong way - How To - Cursor - Community Forum](https://forum.cursor.com/t/you-re-using-cursor-rules-the-wrong-way/62530#:~:text=3,applied%20in%20every%20AI%20action)).

13. Turn on **visibility for rules** (a feature in Cursor) if you’re debugging rule behavior. This allows you to see which rules are being applied to each AI action ([You’re using Cursor rules the wrong way - How To - Cursor - Community Forum](https://forum.cursor.com/t/you-re-using-cursor-rules-the-wrong-way/62530#:~:text=3,applied%20in%20every%20AI%20action)). It’s a useful trick to understand how the AI is interpreting your .mdc files – you’ll see when a specific rule triggers, so you know your rules are working as intended.

14. Even though the old `.cursorrules` file (global rules file) is technically deprecated, you can still use it in a clever way. Some users put references to their modular `.mdc` rules inside `.cursorrules` to **force Cursor to load them** ([You’re using Cursor rules the wrong way - How To - Cursor - Community Forum](https://forum.cursor.com/t/you-re-using-cursor-rules-the-wrong-way/62530#:~:text=ipospelov%20%20March%2012%2C%202025%2C,10%3A10am%20%206)). In practice, `.cursorrules` can act like an index that ensures your custom rules are always considered by the AI.

15. Note that as of recent updates, the `@codebase` shorthand was removed from Chat mode ([Ngl getting a little frustrated - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/ngl-getting-a-little-frustrated/57718#:~:text=1,projects%20for%20those%203%20days)). In older versions, you could include your whole codebase context automatically, but now you need to manually specify context (likely for better control). This means you should explicitly reference the files or sections you want the AI to look at.

16. Use the `@` symbol liberally to give context. For example, include `@utils/helpers.js` or `@models/User.py` in your prompt to point Cursor to those files ([Cursor 0.48 What new features are expected - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/cursor-0-48-what-new-features-are-expected/63747#:~:text=implement%20two%20revolutionary%20features%3A)). Manually telling Cursor which files to consider helps it zero in on relevant code, since it no longer can just ingest everything automatically.

17. Conversely, **don’t shotgun your entire project** into context if it’s not needed. The more code and docs you cram into a single prompt, the more the AI has to chew on and filter ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=,correct)). It can actually become less accurate if overwhelmed. Only attach the files that are relevant to your question at hand – quality over quantity when providing context.

18. Maintain a `.cursorignore` file similar to `.gitignore` ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=1,cursorignore)). List out directories or file types that the AI should ignore (like build artifacts, large data files, `node_modules`, etc.). This keeps Cursor’s index cleaner so it doesn’t waste context window space on files that don’t matter to your logic.

19. Provide project documentation to the AI for better results. One method: create a **project overview** document and keep it updated in a `.notes` folder. If you have a `project_overview.md` describing your app’s purpose, architecture, and conventions, have the AI read it at the start of a session ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=2.1.%20Populate%20)) ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=)). This primes Cursor with high-level context and can make its suggestions more on-target for your project’s goals.

20. Likewise, keep a running **task list** in a file (e.g. `task_list.md` in that same `.notes` directory) and use it to brief Cursor ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=2.2.%20Create%20)) ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=)). If the AI knows what features are in progress or what remains to be done (and their priority), it might tailor its code suggestions to fit the current focus, and not suggest things scheduled for later.

21. Give Cursor a bird’s-eye view of your project structure. Users have found it useful to generate a `directory_structure.md` or similar file that outlines the project’s files and folders ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=match%20at%20L191%202,md)). You can then include that in your context for bigger tasks – it helps the AI understand where new files should go or how different parts of the codebase connect.

22. **Handover trick:** If your AI chat has gotten too lengthy or unstable, do what one user did – summarize and reset. They had the AI generate a `HANDOVER.md` documenting everything done so far and any quirks or decisions, then moved the project to a new folder and started a fresh chat, feeding in that handover doc ([Has anyone found a solution to stop Cursor from crashing and causing high CPU usage? - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/has-anyone-found-a-solution-to-stop-cursor-from-crashing-and-causing-high-cpu-usage/62115#:~:text=seancurran%20%20March%2010%2C%202025%2C,8%3A53pm%20%202)). The result was a fresh, fast session that still “remembered” the important stuff via the summary.

23. Iterate with the AI step by step. Many experienced users say that writing a huge, monolithic prompt yields worse results than an interactive approach ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=gandan,12%3A51pm%20%202)). Guide Cursor one step at a time: e.g., “First, create the data model,” then “OK, now write a function to save it.” This lets you catch and correct mistakes early.

24. Remember that you can go back and edit your earlier prompt messages in Cursor’s chat history. If the AI took a wrong turn due to a misleading instruction, scroll up and rephrase that instruction, then run the conversation from there. Adjusting an earlier prompt is often more effective than asking the AI to correct its own flawed output at the end ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=content%20the%20harder%20it%20will,correct)).

25. Don’t hesitate to tell Cursor’s AI when it’s wrong or missing something – it won’t get offended! If the AI output ignores part of your request or has an error, explicitly point that out and ask for a fix. For example: “The solution looks good, but you didn’t handle the error case I mentioned.” Direct feedback often gets better second-round results ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,of%20the%20one%20outlined%20in)).

26. Use version control religiously with AI-assisted coding. Commit your changes **before** you apply Cursor’s suggestions and commit again after ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=approach%20and%20may%20easily%20just,correct)). This way, if the AI introduces a bug or you don’t like its edit, you have an easy checkpoint to revert to or to diff against. Frequent small commits are a lifesaver when an AI is making automated edits ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=approach%20and%20may%20easily%20just,correct)).

27. If you have an automated test suite, run it after the AI makes modifications. Don’t assume the AI’s code works – treat it like a teammate’s code that needs verification. One user emphasized writing tests specifically so that any AI-introduced issues would get caught immediately in CI or local runs ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=to%20write%20effective%2C%20clean%2C%20precise,does%20everything%20automatically%20but%20with)).

28. Cursor can help you write tests, too. After implementing a feature (whether manually or with AI), ask Cursor to **generate a unit test suite** for it ([Smart customized Prompts on top of main System Prompt with espanso: A Practical Guide - Showcase - Cursor - Community Forum](https://forum.cursor.com/t/smart-customized-prompts-on-top-of-main-system-prompt-with-espanso-a-practical-guide/24374#:~:text=,system)). Users who do this find that it not only saves time writing boilerplate tests, but sometimes the AI-written tests can reveal edge cases or requirements you hadn’t considered.

29. Provide examples of the style or pattern you want. The AI is extremely good at **pattern mimicry** – if you show it one correctly-implemented example, it will follow that template for similar tasks. For instance, if you have one API endpoint done in your desired format, and you need another endpoint, point Cursor to the existing one as a model to emulate ([Cursor told me I should learn coding instead of asking it to generate it + limit of 800 locs - Bug Reports - Cursor - Community Forum](https://forum.cursor.com/t/cursor-told-me-i-should-learn-coding-instead-of-asking-it-to-generate-it-limit-of-800-locs/61132#:~:text=Usually%20its%20a%20good%20idea,%E2%80%A6)).

30. Include known design principles in your instructions. If you want cleaner code, you can say something like “apply the single-responsibility principle” or “use dependency injection” in your prompt. According to user feedback, the model will try to follow those high-level guidelines in its output ([Cursor told me I should learn coding instead of asking it to generate it + limit of 800 locs - Bug Reports - Cursor - Community Forum](https://forum.cursor.com/t/cursor-told-me-i-should-learn-coding-instead-of-asking-it-to-generate-it-limit-of-800-locs/61132#:~:text=Usually%20its%20a%20good%20idea,%E2%80%A6)). It might not be perfect, but it nudges the AI toward better structured code.

31. Add strict rules for critical requirements. For example, if you absolutely cannot compromise on type safety or security, put that in writing (in a rules file or initial prompt). A user’s rule file included lines like “NEVER break type safety” and “ALWAYS document new code” ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,1.0)) – reminding the AI of these each time helps keep it in check.

32. Don’t skip the official docs and changelogs. It sounds obvious, but many frustrations come from not knowing how Cursor expects to be used. One enthusiast noted that lots of complaints stemmed from misunderstanding features ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=Most%20critical)). Spending a few minutes reading the docs (especially after a major update like 0.46) can reveal new commands or workflow changes that make a big difference in how you should prompt the AI.

33. **Swap modes on the fly.** In Cursor, you can seamlessly switch between Ask (chat) mode and the Agent (autonomous) mode without losing context ([Cursor 0.46 UI Update | Instructa Courses](https://www.instructa.ai/en/blog/cursor-0-46-updates#:~:text=You%20can%20now%20switch%20between,modes%20within%20the%20same%20context)). For instance, you might discuss a plan in Ask mode (“How should we implement feature X?”) and once the plan is clear, switch to Agent mode to let it execute the changes. This avoids manually transferring context between separate chats.

34. Use the right AI mode for the right job. Users have broken it down like this: Use **Ask mode** for conversational help, brainstorming, or debugging (it’s like talking to a pair programmer) ([Cursor 0.46 UI Update | Instructa Courses](https://www.instructa.ai/en/blog/cursor-0-46-updates#:~:text=The%20,modes)). Use **Edit mode** (previously Composer normal) when you want the AI to generate or refactor code in a focused way in one file. And use **Agent mode** for broad, project-wide tasks that may involve creating or editing many files autonomously ([Cursor 0.46 UI Update | Instructa Courses](https://www.instructa.ai/en/blog/cursor-0-46-updates#:~:text=Composer%20)).

35. **Agent mode** is powerful but make sure to give it guidance. It will attempt to handle large-scale tasks (refactoring multiple files, adding a feature across the codebase, running shell commands, etc.) ([Cursor 0.46 UI Update | Instructa Courses](https://www.instructa.ai/en/blog/cursor-0-46-updates#:~:text=Composer%20)). Before you unleash the agent, set some rules or at least provide a clear goal to keep it from wandering off. E.g., “Implement feature X using files A, B, and C; don’t touch others.”

36. Always review the diff of what the AI did before accepting changes. Cursor shows you diffs of AI-made edits – take time to read through them ([Cursor 0.46 UI Update | Instructa Courses](https://www.instructa.ai/en/blog/cursor-0-46-updates#:~:text=2,Diff%20View)). Users have caught many AI slip-ups this way. Think of it as a code review: even if 90% is great, that remaining 10% might include a subtle bug or something out of spec.

37. If Cursor starts misunderstanding you repeatedly in a session, it might be carrying too much outdated context. You can **refresh the conversation** by clearing the history. One community member suggests wiping the chat history or reloading the model instance, which often restores the AI’s focus and consistency ([People, Your Honest Opinion - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/people-your-honest-opinion/62015#:~:text=Another%20trick%20is%20refreshing%20context,see%20if%20it%20improves%20accuracy)).

38. In fact, periodically **refresh the context** even if things seem fine. Some users proactively start a new chat after completing a major sub-task, to give the AI a “clean slate” for the next topic ([People, Your Honest Opinion - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/people-your-honest-opinion/62015#:~:text=Another%20trick%20is%20refreshing%20context,see%20if%20it%20improves%20accuracy)). They’ll copy over any important info (like by asking “Here’s what we accomplished so far…got it?”) and continue. This can prevent confusion that arises from extremely long sessions.

39. If you encounter “High load, please try again later” errors with the AI (particularly on Claude models), that’s an issue on the provider side due to demand ([People, Your Honest Opinion - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/people-your-honest-opinion/62015#:~:text=Maximophone%20%20March%2011%2C%202025%2C,1%3A57pm%20%2010)). What you can do: switch to a different model if you have access (e.g., GPT-4) or simply wait a bit and retry. These errors are temporary, but they can be frequent during peak times ([People, Your Honest Opinion - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/people-your-honest-opinion/62015#:~:text=Sonnet%203,it%20has%20become%20completely%20unusable)).

40. Consider keeping a fallback AI that runs locally or offline. One user stressed the importance of open-source alternatives as a backup ([Ngl getting a little frustrated - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/ngl-getting-a-little-frustrated/57718#:~:text=fahmidme%20%20March%201%2C%202025%2C,7%3A14pm%20%204)). If Cursor (which relies on cloud AI) becomes unavailable or slow, having a local model (even if less capable) means you’re not completely dead in the water. It’s like having a generator when the power goes out.

41. Experiment with Cursor’s supported models to find which works best for your needs. Some tasks might be better suited to one model over another. For example, in 2025 many found **Claude 3.7** (Sonnet) in Cursor very helpful for coding, but others preferred using GPT-4 for complex algorithmic logic. The models have different “skills,” so don’t hesitate to try alternatives if your plan allows ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=,filter%20out%20the%20right%20information)).

42. Similarly, keep in mind some models are better planners while others are better coders ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=,filter%20out%20the%20right%20information)). If you notice the AI writing code is great but it doesn’t break problems down well, or vice versa, that could be the model’s nature. Use the one that fits the stage of development: maybe use Claude for code generation but ask GPT for outlining an approach (or vice versa).

43. Use structured approaches in your prompts. A great method shared by a user is using **MECE** (Mutually Exclusive, Collectively Exhaustive) breakdowns ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,on%20this%20breakdown%3F%20Any%20suggestions)). For instance, instead of asking “How do I build this feature?”, say “Let’s break this into parts: 1) Data model, 2) API endpoints, 3) UI components – can you outline each?” This forces the AI to organize its thoughts and cover all areas systematically.

44. Ask the AI to explain its reasoning by asking “why” questions about its suggestions. If Cursor tells you to do something a certain way, fire back a **“Why?”** – e.g., “Why use approach X instead of Y here?” ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,%E2%80%9D)). A good AI answer will either give you confidence in its decision or reveal if it’s just guessing. Plus, you learn more.

45. Challenge Cursor with “what if” scenarios. For example: “What if this function receives invalid data?” or “What if we need to scale to 1 million users?” ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,provide%20a%20good%20user%20experience%3F%E2%80%9D)). By discussing hypothetical situations, you prompt the AI to consider edge cases and robustness of the solution. It’s like brainstorming failure modes with a colleague.

46. Use **“remember when”** references to maintain continuity in long chats. You can say, “Remember when we fixed the caching issue earlier – apply the same solution here,” to anchor the AI’s memory ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,%E2%80%9D)). It often does remember when nudged! This prevents you from re-explaining things and helps the AI not to contradict its earlier solutions.

47. Keep a persistent log of decisions and info and feed it to the AI as needed. For example, maintain a `notes/meeting_notes.md` where you jot down what you and the AI have agreed on ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=4,Collaboration%20to%20the%20Next%20Level)). You can periodically tell Cursor, “Update the meeting_notes.md with what we just did.” Later, if you restart or come back to the project, having the AI read those notes will quickly bring it up to speed on context again.

48. Use Cursor as a code reviewer, not just a code writer. You can paste diffs or code blocks and prompt with something like, “Review this code for any issues or improvements.” The AI can act like a rubber-duck debugger or a second pair of eyes, catching things you might miss ([How to use prompt in cursor? - How To - Cursor - Community Forum](https://forum.cursor.com/t/how-to-use-prompt-in-cursor/18966#:~:text=,literals%20unless%20changes%20are%20necessary)). It might point out potential bugs, stylistic issues, or suggest better approaches.

49. Fine-tune the format of the AI’s output by specifying it in your prompt. For instance, if you want just code, you can say “Provide only the code without explanations” or if you want a breakdown, say “Explain each step with comments.” Users find that adding these instructions saves time cleaning up the answer later ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,function%20in)).

50. Be **very specific** in your requests. Instead of a broad “How can I improve this code?”, ask something like “How can I refactor the `getUsers()` function in `@services/userService.js` to reduce its time complexity?” ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,function%20in)). The clearer and more pointed your question, the more precise Cursor’s answer will be.

51. Don’t expect the first answer to be the final answer. Think of interacting with Cursor as an iterative process ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,recommend%20using%20this%20particular%20state)). You might get an initial solution that’s 70% there – then you refine the prompt or tell the AI what to fix, and you get closer to 100%. This back-and-forth is normal (and fast!), so plan for a couple iterations rather than trying to get a perfect solution in one go.

52. Use Cursor as a sounding board to clarify your own understanding. A trick: explain the problem or your code aloud to Cursor (literally type out an explanation of what you think is happening). Often, the act of explaining it will either solve it for you or the AI will chime in to correct a misunderstanding ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,%E2%80%9D)). It’s like the “rubber duck debugging” method, but the duck talks back with hints.

53. If you want the AI to include certain content in its response (like comments or specific format), instruct it via **system or role-play prompts**. For example, say: “You are a senior engineer. Respond with a code block and a brief explanation.” Some users even set up text-expansion shortcuts to insert structured system prompts for consistency ([Smart customized Prompts on top of main System Prompt with espanso: A Practical Guide - Showcase - Cursor - Community Forum](https://forum.cursor.com/t/smart-customized-prompts-on-top-of-main-system-prompt-with-espanso-a-practical-guide/24374#:~:text=Standard%20prompts%20improve%20consistency%20and,formatting%20across%20your%20development%20workflow)) ([Smart customized Prompts on top of main System Prompt with espanso: A Practical Guide - Showcase - Cursor - Community Forum](https://forum.cursor.com/t/smart-customized-prompts-on-top-of-main-system-prompt-with-espanso-a-practical-guide/24374#:~:text=,system)).

54. Don’t forget that Cursor can assist in the terminal too. If you open a terminal in Cursor, you can hit a shortcut (e.g. `Ctrl+K`) to have the AI suggest shell commands based on a natural language description ([Understanding Cursor's AI feature - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/understanding-cursors-ai-feature/7204#:~:text=Interpreter%20mode%20generates%20executable%20Python,on%20your%20local%20file%20system)). This is great for DevOps tasks: e.g., “install the latest React version” can prompt the correct `npm install` command. It’s an AI pair programmer for your command line as well.

55. Pre-load new frameworks or libraries: if you’re introducing, say, a new UI library, you can first ask Cursor to read a summary of its docs. For instance, paste a key excerpt of the library’s README or docs and ensure the AI ingests it ([Cursor prompt engineering best practices - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/cursor-prompt-engineering-best-practices/1592#:~:text=also%20,cursorrules)). Then, when you start coding with that library, Cursor will already be aware of its API and best practices.

56. Cursor has an **“Interpreter” mode in chat** where it can run code. If you switch the chat to Interpreter mode, the AI can execute Python code snippets on your local machine ([Understanding Cursor's AI feature - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/understanding-cursors-ai-feature/7204#:~:text=)). This is useful if you want the AI to test a small snippet or do a quick computation. For example, you can ask it to run a short Python function to see the output, right within Cursor.

57. Ask Cursor to generate commit messages or summaries of changes. A recent update shows commit diffs in Cursor, and the AI can explain them ([Cursor 0.46 UI Update | Instructa Courses](https://www.instructa.ai/en/blog/cursor-0-46-updates#:~:text=The%20update%20includes%20new%20names,use%20terminal%20commands%20inside%20Cursor)). After you accept AI changes, you might say, “Summarize these changes for a commit log.” It can produce a nice commit message or even a section for your CHANGELOG describing what was done.

58. Use two AI systems to validate each other. Some users run Cursor and another AI (like ChatGPT in the browser) side by side ([People, Your Honest Opinion - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/people-your-honest-opinion/62015#:~:text=Another%20trick%20is%20refreshing%20context,see%20if%20it%20improves%20accuracy)). They’ll sometimes paste Cursor’s output into ChatGPT asking “is there any error here?” or vice versa. This kind of cross-verification can catch mistakes — it’s like getting a second opinion on the code instantly.

59. Keep an eye on your system’s performance as well. If you’re on an older machine and Cursor (which is a VSCode fork) starts consuming a lot of CPU or memory, consider closing other large programs. One user asking about high CPU usage suspected memory leaks ([Has anyone found a solution to stop Cursor from crashing and causing high CPU usage? - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/has-anyone-found-a-solution-to-stop-cursor-from-crashing-and-causing-high-cpu-usage/62115#:~:text=Hey%20everyone%2C%20just%20wanted%20to,the%20development%20process%20nearly%20impossible)). Until those are fully fixed by updates, a lighter system load and occasional app restart can help.

60. Utilize **global rules** for organization-wide standards. Cursor allows setting global AI rules (accessible via a globe icon in the interface) which apply to all projects ([Cursor 0.46 UI Update | Instructa Courses](https://www.instructa.ai/en/blog/cursor-0-46-updates#:~:text=3)). If you have a coding standard or lint rules that you always want followed (regardless of project), put them in the global context. For example, a global rule could enforce naming conventions or tab width that you use everywhere.

61. If you find yourself writing the same prompt over and over (like “Optimize this function” or “Write tests for this code”), automate it. Some advanced users use a text expander to insert complex system prompts via shortcuts ([Smart customized Prompts on top of main System Prompt with espanso: A Practical Guide - Showcase - Cursor - Community Forum](https://forum.cursor.com/t/smart-customized-prompts-on-top-of-main-system-prompt-with-espanso-a-practical-guide/24374#:~:text=Standard%20prompts%20improve%20consistency%20and,formatting%20across%20your%20development%20workflow)). For instance, typing `:test` could expand to a detailed system prompt telling Cursor how to format a full test suite output ([Smart customized Prompts on top of main System Prompt with espanso: A Practical Guide - Showcase - Cursor - Community Forum](https://forum.cursor.com/t/smart-customized-prompts-on-top-of-main-system-prompt-with-espanso-a-practical-guide/24374#:~:text=,system)). This ensures consistency and saves typing time.

62. Leverage Cursor for refactoring tasks you’d find tedious. For example, if you need to rename a variable across a file, you can just do that with a multi-cursor find/replace… but if it’s a semantic rename across many files (or a more complex refactor), tell Cursor what you want. “Refactor this code to use dependency injection” can prompt the AI to make a series of changes following that guideline ([Smart customized Prompts on top of main System Prompt with espanso: A Practical Guide - Showcase - Cursor - Community Forum](https://forum.cursor.com/t/smart-customized-prompts-on-top-of-main-system-prompt-with-espanso-a-practical-guide/24374#:~:text=,system)). It will break it down into steps and execute them (especially in Agent mode).

63. Write a quick pseudo-code or comment outline, then ask Cursor to implement it. Many users effectively “sketch” a solution in comments and then let Cursor fill in the actual code. For example: 

    ```js
    // 1. Validate input
    // 2. If valid, save to database
    // 3. Return success or error
    ```
    
    Then ask Cursor to implement that function. This approach combines your high-level guidance with the AI’s ability to flesh out the details ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=overlapping%20subtasks.%20%2A%20Example%3A%20,feedback%20on%20its%20suggestions%2C%20ask)).

64. If the AI provides an explanation or code and you aren’t sure it’s following your design, ask it to **reference the project docs or specs**. E.g., “Does this align with the design in `@notes/project_overview.md`?” ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,%E2%80%9D)). Forcing the model to compare its answer against your spec can make it correct itself if it deviated from requirements.

65. Try out the new **MCP (Multi-Context Platform) servers** feature to extend what Cursor can do. For instance, one user integrated a **Browser MCP** which allows Cursor’s agent to literally browse the web for information ([Making Cursor x10 Stronger with MCP Servers - How To - Cursor - Community Forum](https://forum.cursor.com/t/making-cursor-x10-stronger-with-mcp-servers/67470#:~:text=seamless%20loop%20between%20coding%20and,tools%2C%20resources%2C%20and%20see%20all)). This means the AI could, say, fetch documentation or search for an error message online as part of solving your coding task. It’s a next-level capability for research-heavy coding.

66. Add a testing tool MCP to your workflow. A great example: hooking up **Playwright as an MCP** server, so the AI can run frontend tests by itself ([Making Cursor x10 Stronger with MCP Servers - How To - Cursor - Community Forum](https://forum.cursor.com/t/making-cursor-x10-stronger-with-mcp-servers/67470#:~:text=1,to%20use%20a%20particular%20option)). With that, you could ask the agent to implement a feature *and verify it* by running UI tests. It creates a loop where Cursor writes code and immediately checks it, which is kind of mind-blowing and can automate a lot of QA work.

67. Whenever you add an MCP (external tool) for Cursor, describe it to the AI. Put a short description in your rules about *when* to use each tool ([Making Cursor x10 Stronger with MCP Servers - How To - Cursor - Community Forum](https://forum.cursor.com/t/making-cursor-x10-stronger-with-mcp-servers/67470#:~:text=scenarios%20for%20services%20I%20develop,all)). For example: “Tool: Browser – use for any task requiring web research” as a rule. Users found that once they did this, the AI started invoking the correct tool at the right time on its own, without needing to be told explicitly in the prompt.

68. Think outside the box: Cursor isn’t just for writing application code. With custom tools or clever prompting, you can use it for things like managing your database, automating documentation, or even writing content. People on the forum have started using Cursor as an **“AI editor”** for all sorts of tasks by connecting various MCP servers ([Making Cursor x10 Stronger with MCP Servers - How To - Cursor - Community Forum](https://forum.cursor.com/t/making-cursor-x10-stronger-with-mcp-servers/67470#:~:text=issues%20directly%20from%20the%20UI,all%20through%20MCP%20server%20connections)). For example, you could have an MCP that interfaces with Notion or Jira, and the AI could file issues or update tickets for you!

69. One user integrated **ManimGL (a Python animation library) as an MCP**, which is a fun example of Cursor’s extensibility ([Making Cursor x10 Stronger with MCP Servers - How To - Cursor - Community Forum](https://forum.cursor.com/t/making-cursor-x10-stronger-with-mcp-servers/67470#:~:text=SoMaCoSF%20%20March%2020%2C%202025%2C,3%3A27pm%20%202)). With that, they can literally tell Cursor’s agent, “Give me an X animation” and it will produce a ManimGL script to generate that scene. This shows that if you have a specialized need (like creating visuals or performing scientific calculations), you can bolt on a tool and get Cursor to drive it.

70. **Treat the AI like a junior developer paired with you.** This mindset helps get the best results. You wouldn’t expect a junior dev to nail a complex feature without guidance – you’d outline the approach, review their code, ask them to make changes, etc. Do the same with Cursor ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,recommend%20using%20this%20particular%20state)). Guide it, review its output, and iterate. The AI thrives with that kind of interactive collaboration.

71. If Cursor gets confused or the conversation goes in circles, don’t be afraid to **scrap it and start fresh** on that particular problem. A user noted that sometimes it’s faster to begin a new chat (or at least rephrase the question entirely) than to keep trying to salvage a deeply misaligned thread ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,a%20confused%20or%20misaligned%20AI)). You have infinite tries – use a new one if needed.

72. Use Cursor for **self-education** too. If you encounter unfamiliar code in your project, ask Cursor to explain it. It can walk you through what a function or block of code does in plain language, often very clearly ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=After%20a%20few%20years%20of,prompting%20here%20is%20my%20takeaway)). This is especially handy when diving into a new codebase or when inheriting someone else’s code – the AI becomes a tutor for the code.

73. Prompt the AI to **think step-by-step** if you want more reliable results. Literally say, “Please think through this step by step before coding,” or ask it to list its plan. This can slow it down just enough to catch logical issues. It might list a plan, which you can approve or tweak, and then you say “Great, implement that.” This approach, frequently discussed, tends to reduce mistakes in the final code ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,on%20this%20breakdown%3F%20Any%20suggestions)).

74. If you have multiple files to update, you can reference them all in one prompt. For example: “Update the function in `@backend/utils.py` and adjust the call in `@frontend/App.jsx` accordingly.” Cursor will consider both files’ content before answering ([Cursor prompt engineering best practices - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/cursor-prompt-engineering-best-practices/1592#:~:text=without%20also%20adding%20some%20specific,files)). This multi-file awareness is one of Cursor’s strengths over simpler code assistants.

75. Always sanity-check AI changes that **modify existing code**. One user reported the AI sometimes makes changes unrelated to the task at hand ([People, Your Honest Opinion - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/people-your-honest-opinion/62015#:~:text=In%20general%2C%20I%20feel%20like,AI%20is%20now%20just%20frustrating)). It might decide to “fix” something in passing that you didn’t ask it to. Reviewing diffs or asking “Does this change affect anything else?” can catch those stray modifications. If you see an edit that doesn’t make sense, call it out and ask why the AI did it.

76. Use Agent mode to do bulk mechanical changes, but use Ask/Edit mode for nuanced logic. For instance, you could use the agent to rename a function across the codebase or add a certain import everywhere it’s needed. But for implementing complex new logic, you might guide it step by step. Blending these modes gives you efficiency with control ([Cursor 0.46 UI Update | Instructa Courses](https://www.instructa.ai/en/blog/cursor-0-46-updates#:~:text=Composer%20)).

77. When in doubt, feed Cursor more context rather than less – but targeted context. For example, if it’s generating an API call from the frontend, include the backend route definition in the prompt so it knows the correct parameters ([Cursor prompt engineering best practices - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/cursor-prompt-engineering-best-practices/1592#:~:text=also%20,cursorrules)). Giving it both sides of the equation (client and server code) can prevent a lot of guesswork and errors.

78. If the AI is tackling a complex function, ask it to outline its approach first (almost like pseudocode) ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,on%20this%20breakdown%3F%20Any%20suggestions)). This way you can approve the plan or catch issues in logic before it writes actual code. It’s easier to correct the plan in English than to wade through incorrect code later.

79. **Role-play scenarios** to influence tone or depth. One HN user shared a prompt where the AI is told “You are a world-class software developer…” to get more thorough, educational responses ([How to use prompt in cursor? - How To - Cursor - Community Forum](https://forum.cursor.com/t/how-to-use-prompt-in-cursor/18966#:~:text=You%20are%20a%20world,Adhere%20to%20the%20following%20guidelines)). Another trick: say “Act as a linters and point out all style issues in this code” or “Pretend you are a security auditor.” These role prompts can tune the AI’s output to a specific perspective or checklist.

80. Learn from the community’s experiences (like this list!). There’s a cadre of Cursor enthusiasts on the official forum and on Hacker News sharing what works for them ([Novice user - advice on how to best utilise cursor's tools? - How To - Cursor - Community Forum](https://forum.cursor.com/t/novice-user-advice-on-how-to-best-utilise-cursors-tools/48293#:~:text=oligarchy%20corpo%20part%2C%20not%20the,implants%20and%20cool%20cars)). New tips (and sometimes new bugs or workarounds) pop up frequently, especially with how fast AI tooling is evolving. Staying plugged into those discussions can give you fresh ideas on using Cursor’s AI more effectively.

81. If you know the AI keeps getting something wrong (for example, naming a variable incorrectly or misunderstanding a requirement), **preempt it** in your prompt or rules. A forum tip: add clarifications upfront to save time later ([You’re using Cursor rules the wrong way - How To - Cursor - Community Forum](https://forum.cursor.com/t/you-re-using-cursor-rules-the-wrong-way/62530#:~:text=1,applied%20in%20every%20AI%20action)). For instance, “Note: use the variable names exactly as given, do not invent new ones.” It’s easier to head off an error than to correct it after five attempts.

82. Be aware that Cursor’s AI might sometimes “hallucinate” or do things you didn’t ask for – it’s a known behavior under heavy load or unclear instructions. One user noted it started making changes unrelated to the task at hand ([People, Your Honest Opinion - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/people-your-honest-opinion/62015#:~:text=In%20general%2C%20I%20feel%20like,AI%20is%20now%20just%20frustrating)). If you notice the AI going on a tangent, rein it in: remind it of the scope or explicitly say “do not change anything except X.” Usually, it will comply on the next try.

83. Treat AI suggestions as **drafts**, not final code. Just as you’d review a human contributor’s code, plan to review the AI’s output. Many experienced Cursor users enjoy a massive productivity boost **because** they actively review and test everything the AI does ([My Frustrating Experience with Cursor AI - Bug Reports - Cursor - Community Forum](https://forum.cursor.com/t/my-frustrating-experience-with-cursor-ai/59266#:~:text=The%20app%20crashes%20frequently%2C%20the,be%20met%20with%20constant%20frustration)) ([My Frustrating Experience with Cursor AI - Bug Reports - Cursor - Community Forum](https://forum.cursor.com/t/my-frustrating-experience-with-cursor-ai/59266#:~:text=The%20last%2010%20days%20or,I%E2%80%99ll%20never%20us%20it%20again)). The AI might get you 90% of the way there quickly, but you are still responsible for the last 10% of polish and correctness.

84. If you’re working with sensitive code, use **Privacy Mode** and understand its trade-offs. Privacy Mode ensures code isn’t sent to Cursor’s servers for embedding ([Privacy mode - state of the union - Cursor - Community Forum](https://forum.cursor.com/t/privacy-mode-state-of-the-union/36977#:~:text=Forum%20forum,the%20life%20of%20the%20request)), but it might disable some codebase search features. In this case, you’ll need to be even more explicit with context (since the AI can’t automatically index your whole code). It’s worth it for proprietary projects – just feed it relevant files directly and it will operate locally.

85. Use Cursor to **explain tricky code** before you modify it. If you have a complicated legacy function to improve, first ask “Can you explain what this function is doing?” ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=After%20a%20few%20years%20of,prompting%20here%20is%20my%20takeaway)). The AI will walk through it and potentially reveal edge cases or logic that you need to preserve. This understanding phase can prevent introducing bugs when you or the AI start editing the code.

86. A neat workflow: have Cursor propose a solution, then discuss it before coding. For example, “How should we approach adding feature X?” Let it outline a plan. You review that plan (maybe iterate on it) and only then say “Alright, implement step 1.” This two-step process (plan then execute) often leads to higher quality output than one big “implement X” prompt ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,recommend%20using%20this%20particular%20state)).

87. Use Cursor’s file search and open commands to your advantage. You can ask in chat, “Open the file where `Class Foo` is defined” and Cursor will usually find and open it (or at least tell you which file) ([Cursor prompt engineering best practices - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/cursor-prompt-engineering-best-practices/1592#:~:text=without%20also%20adding%20some%20specific,files)). This saves you from manual searching and also confirms the AI knows where things are. It’s also a way to ensure the AI has that file in context – by explicitly opening it, you guarantee it’s loaded for reference.

88. **Pay attention to AI suggestions even when you’re coding manually.** Cursor’s autocompletion can sometimes pre-empt your thinking and suggest a simpler approach or catch a mistake. A user said Cursor would autocomplete things like adding necessary imports or parameters without being asked ([People, Your Honest Opinion - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/people-your-honest-opinion/62015#:~:text=In%20general%2C%20I%20feel%20like,AI%20is%20now%20just%20frustrating)). It’s like having a smart linter combined with an assistant – the subtle suggestions (gray text) can be just as useful as the big chat outputs.

89. If Agent mode feels too risky (maybe it’s making broad changes you’re not confident about), throttle back. You can do a lot with **Ask mode + manual accept/reject**. For instance, instead of letting the agent apply changes blindly, ask the AI in chat, “What changes need to be made in files A, B, C to implement Y?” Then apply them yourself or one by one. This gives you more control if the agent’s granularity is too coarse ([Cursor told me I should learn coding instead of asking it to generate it + limit of 800 locs - Bug Reports - Cursor - Community Forum](https://forum.cursor.com/t/cursor-told-me-i-should-learn-coding-instead-of-asking-it-to-generate-it-limit-of-800-locs/61132#:~:text=It%20also%20seems%20you%20are,the%20%E2%80%98editor%E2%80%99%20part%20of%20Cursor)) ([Cursor told me I should learn coding instead of asking it to generate it + limit of 800 locs - Bug Reports - Cursor - Community Forum](https://forum.cursor.com/t/cursor-told-me-i-should-learn-coding-instead-of-asking-it-to-generate-it-limit-of-800-locs/61132#:~:text=Yes%20it%20would%20help%20to,files%20into%20your%20%E2%80%98start%20file%E2%80%99)).

90. Use Cursor to help with UI/UX code, not just logic. One founder used Cursor’s Composer to build an entire landing page with HTML/CSS in 24 hours ([Show HN: Transcelestial Space (Made 100% with Cursor and Claude in 24 hours) | Hacker News](https://news.ycombinator.com/item?id=43228392#:~:text=CEO%20and%20Co,have%20been%20building%20for%20it)) ([Show HN: Transcelestial Space (Made 100% with Cursor and Claude in 24 hours) | Hacker News](https://news.ycombinator.com/item?id=43228392#:~:text=Hence%20design%20and%20story%20telling,instead%20JUST%20using%20cursor%20composer)). You can describe the look and functionality of a component in plain English and let the AI draft the JSX/CSS. It’s especially handy for generating variants (e.g., “make a responsive version of this layout”) since the AI can do the tedious work of trial and error in CSS.

91. Let Cursor handle the boring boilerplate so you can focus on interesting logic. For example, writing model classes, DTOs, repetitive getters/setters, or basic form validation – these are things users often delegate to Cursor. One user shared prompt templates (using espanso) for tasks like adding exhaustive logging or input validation layers ([Smart customized Prompts on top of main System Prompt with espanso: A Practical Guide - Showcase - Cursor - Community Forum](https://forum.cursor.com/t/smart-customized-prompts-on-top-of-main-system-prompt-with-espanso-a-practical-guide/24374#:~:text=,system)) ([Smart customized Prompts on top of main System Prompt with espanso: A Practical Guide - Showcase - Cursor - Community Forum](https://forum.cursor.com/t/smart-customized-prompts-on-top-of-main-system-prompt-with-espanso-a-practical-guide/24374#:~:text=,system)). The AI excels at consistent, repeatable patterns, so give it those while you tackle the complex stuff.

92. Stay tuned into the Cursor community for knowledge on new updates or hidden features. For instance, when Cursor’s developers deprecated `.cursorrules` in favor of per-file rules, it was community discussions that clarified how to adapt (like using the old file to reference new ones) ([You’re using Cursor rules the wrong way - How To - Cursor - Community Forum](https://forum.cursor.com/t/you-re-using-cursor-rules-the-wrong-way/62530#:~:text=Here%E2%80%99s%20what%20made%20the%20biggest,difference)) ([You’re using Cursor rules the wrong way - How To - Cursor - Community Forum](https://forum.cursor.com/t/you-re-using-cursor-rules-the-wrong-way/62530#:~:text=ipospelov%20%20March%2012%2C%202025%2C,10%3A10am%20%206)). By reading the forum or HN threads around each update, you’ll pick up valuable tips on how to tweak your usage.

93. Update your prompting habits as Cursor updates. Something that was needed as a workaround last month might be built-in this month. For example, if they improve context handling or add a new keybinding, incorporate that. A user pointed out that Cursor needs to head towards a one-mode, fully agentic approach with robust codebase knowledge ([Ngl getting a little frustrated - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/ngl-getting-a-little-frustrated/57718#:~:text=Overall%2C%20I%20don%E2%80%99t%20think%20Cursor,in%20such%20a%20competitive%20market)) – and indeed, updates have been moving in that direction. So your older, multi-step prompts might be simplified by a new version; keep an eye out.

94. Take advantage of Cursor’s **Tab autocomplete** for small code completions – it’s uncannily good at continuing your line of thought ([Ask HN: What is your experience with Cursor? | Hacker News](https://news.ycombinator.com/item?id=41508118#:~:text=i%27ve%20tried%20cody%2C%20double%2C%20and,and%20types%2C%20documenting%20them%2C%20etc)). Many users mention that for writing boilerplate or repetitive code, the inline suggestions save a ton of time (sometimes it completes whole chunks of code perfectly). You don’t always need to open the chat; often just writing a function signature and hitting Tab can have Cursor fill in a plausible implementation.

95. Before using a new technology in your project, brief Cursor about it. If you plan to integrate, say, a payment API, provide the AI with the API’s docs or a summary and maybe even generate a `.md` note for it ([Cursor prompt engineering best practices - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/cursor-prompt-engineering-best-practices/1592#:~:text=also%20,cursorrules)). Then when you ask Cursor to use that API, it’s less likely to make up calls or misuse it because it has actual reference info.

96. Use Cursor for quick prototyping. One person described how using Cursor left them **“filled with excitement”** because they could build something in hours that would normally take days ([Show HN: Transcelestial Space (Made 100% with Cursor and Claude in 24 hours) | Hacker News](https://news.ycombinator.com/item?id=43228392#:~:text=,design%20or%20code%20perspective%2C%20etc)) ([Show HN: Transcelestial Space (Made 100% with Cursor and Claude in 24 hours) | Hacker News](https://news.ycombinator.com/item?id=43228392#:~:text=what%20a%20time%20we%20live,and%20kids%20around%20the%20world)). Even if the prototype code isn’t production-ready, the ability to flesh out an idea rapidly with AI assistance is huge. You can always manual-refine the prototype later.

97. Try a workflow where you write a high-level spec or series of comments, and have Cursor implement it. For example, write out a comment plan: 

    ```python
    # 1. Check user permissions
    # 2. If admin, allow access to all records
    # 3. If regular user, filter records by user’s ID
    ```
    
    Then ask Cursor to fill in the code under those comments. It will usually follow the outline exactly ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=,by%20AI%20on%20code%20to)), saving you time from writing the mundane parts while sticking to your plan.

98. Cursor can help in multi-language projects by translating concepts. If you’re stronger in one language, describe the solution in that language, and ask Cursor to implement in the target language. For example, “In Python I’d use a list comprehension here; how do I do that in Go?” The AI can bridge the gap. A founder forced himself to only use Cursor and an AI model (Claude) to build a web app and it handled the translation from idea to code in the necessary languages ([Show HN: Transcelestial Space (Made 100% with Cursor and Claude in 24 hours) | Hacker News](https://news.ycombinator.com/item?id=43228392#:~:text=CEO%20and%20Co,have%20been%20building%20for%20it)) ([Show HN: Transcelestial Space (Made 100% with Cursor and Claude in 24 hours) | Hacker News](https://news.ycombinator.com/item?id=43228392#:~:text=Hence%20design%20and%20story%20telling,instead%20JUST%20using%20cursor%20composer)).

99. Use Cursor for **spike solutions**. Let it generate a quick and dirty version of a feature so you can validate an approach, then you can rewrite or clean it up properly. Users have found that even if they don’t use the AI’s code verbatim, it can outline the solution and identify pitfalls in minutes, which is invaluable for prototyping and brainstorming ([Show HN: Transcelestial Space (Made 100% with Cursor and Claude in 24 hours) | Hacker News](https://news.ycombinator.com/item?id=43228392#:~:text=,design%20or%20code%20perspective%2C%20etc)) ([Show HN: Transcelestial Space (Made 100% with Cursor and Claude in 24 hours) | Hacker News](https://news.ycombinator.com/item?id=43228392#:~:text=what%20a%20time%20we%20live,and%20kids%20around%20the%20world)).

100. **Collaborate with the AI.** At the end of the day, treat Cursor’s AI as a partner in your coding process. The most satisfied users treat it like an assistant: they give it clear instructions, they ask for its opinion, they debate solutions (“Are you sure about this approach?”), and they guide it when it’s off track ([New User: Prompt Engineering Questions - How To - Cursor - Community Forum](https://forum.cursor.com/t/new-user-prompt-engineering-questions/55752#:~:text=,any%20of%20the%20above%20points)) ([My Detailed Guide On How to work with long codebases - Discussion - Cursor - Community Forum](https://forum.cursor.com/t/my-detailed-guide-on-how-to-work-with-long-codebases/52404#:~:text=,recommend%20using%20this%20particular%20state)). Those who simply hit “AI, do everything” and expect perfection tend to be frustrated – but those who engage in a dialogue with Cursor unlock tremendous productivity and actually have fun coding with it. Remember, you’re the lead and Cursor is your diligent (if occasionally over-enthusiastic) pair programmer!